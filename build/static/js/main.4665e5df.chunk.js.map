{"version":3,"sources":["formDisplay/Webcam.js","formDisplay/Form.js","formDisplay/FormButton.js","config.js","App.js","reportWebVitals.js","index.js"],"names":["videoConstraints","width","height","facingMode","WebcamCapture","webcamRef","React","useRef","useState","image","setImage","capture","useCallback","imageSrc","current","getScreenshot","storage","firebase","base64String","split","ref","putString","contentType","then","console","log","catch","e","className","audio","screenshotFormat","src","onClick","preventDefault","Form","useForm","register","getValues","handleSubmit","errors","formState","onSubmit","data","firestore","collection","add","fullname","id","email","tel","gender","dob","alert","type","placeholder","required","maxLength","minLength","pattern","value","Webcam","FormButton","showForm","setShowForm","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","props","componentDidMount","initializeApp","socket","io","connect","path","query","on","success","sdp","textref","JSON","stringify","pc","setRemoteDescription","RTCSessionDescription","candidate","addIceCandidate","RTCIceCandidate","RTCPeerConnection","urls","onicecandidate","sendToPeer","oniceconnectionstatechange","ontrack","remoteVideoref","srcObject","streams","navigator","mediaDevices","getUserMedia","video","options","mirror","stream","window","localStream","localVideoref","addStream","messageType","payload","emit","socketID","createOffer","offerToReceiveVideo","setLocalDescription","createAnswer","desc","parse","addCandidate","candidates","forEach","createRef","style","margin","backgroundColor","this","autoPlay","muted","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4665e5df.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport Webcam from 'react-webcam'\r\nimport firebase from 'firebase'\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nconst WebcamComponent = () => <Webcam/>\r\n\r\nconst videoConstraints = {\r\n  width: 220,\r\n  height: 200,\r\n  facingMode: 'user'\r\n}\r\n\r\nconst WebcamCapture = () => {\r\n  const webcamRef = React.useRef(null)\r\n\r\n  const [image, setImage] = useState('')\r\n\r\n  const capture = React.useCallback(\r\n    () => {\r\n      const imageSrc = webcamRef.current.getScreenshot()\r\n\r\n      setImage(imageSrc)\r\n\r\n      // let file = image\r\n      var storage = firebase.storage()\r\n      const base64String = imageSrc.split(',')[1]\r\n      storage\r\n        .ref('FormPhotos/user.jpeg')\r\n        .putString(base64String, 'base64', { contentType: 'image/jpeg' })\r\n        .then(() => {\r\n          console.log('Image uploaded')\r\n        }).catch((e) => console.log(e))\r\n    },\r\n    [webcamRef]\r\n  )\r\n\r\n  return (\r\n    <div className = 'webcam-container'>\r\n      <div className = 'webcam-img'>\r\n        {\r\n          // eslint-disable-next-line eqeqeq\r\n          image == '' ? <Webcam\r\n            audio = {false}\r\n            height = {200}\r\n            ref = {webcamRef}\r\n            screenshotFormat = 'image/jpeg'\r\n            width = {220}\r\n            videoConstraints = {videoConstraints}\r\n          /> : <img src = {image}/>}\r\n      </div>\r\n      <div>\r\n        {\r\n          // eslint-disable-next-line eqeqeq\r\n          image != ''\r\n\r\n            ? <button onClick = {(e) => {\r\n              e.preventDefault()\r\n              setImage('')\r\n            }} className = 'webcam-btn'>\r\n            Retake Image\r\n            </button>\r\n            : <button onClick = {(e) => {\r\n              e.preventDefault()\r\n              capture()\r\n            }}>Capture</button>\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WebcamCapture\r\n","import React from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport './Form.css'\r\nimport WebcamCapture from './Webcam'\r\nimport './Webcam.css'\r\nimport firebase from 'firebase'\r\n\r\nexport default function Form () {\r\n  const { register, getValues, handleSubmit, formState: { errors } } = useForm()\r\n\r\n  const onSubmit = data => {\r\n    console.log(data)\r\n    const db = firebase.firestore()\r\n    db.collection('form').add({\r\n      fullname: getValues('fullname'),\r\n      id: getValues('id'),\r\n      email: getValues('email'),\r\n      tel: getValues('tel'),\r\n      gender: getValues('gender'),\r\n      dob: getValues('dob')\r\n    })\r\n    alert('Form submitted')\r\n  }\r\n  console.log(errors)\r\n\r\n  return (\r\n    <div className = 'home-container'>\r\n      <div className = 'container'>\r\n        <div className = 'text'>\r\n          <h1>Application Form</h1>\r\n          <form className = 'form' onSubmit = {handleSubmit(onSubmit)}>\r\n            <input type=\"text\" placeholder=\"Full name\" {...register('fullname', { required: true, maxLength: 80 })} />\r\n            <input type=\"number\" placeholder=\"ID number\" {...register('id', { required: true, maxLength: 16, minLength: 16 })} />\r\n            <input type=\"text\" placeholder=\"Email\" {...register('email', { required: true, pattern: /^\\S+@\\S+$/i })} />\r\n            <input type=\"tel\" placeholder=\"Mobile number\" {...register('tel', { required: true, minLength: 6, maxLength: 12 })} />\r\n            <select {...register('gender', { required: true })}>\r\n              <option value=\"Male\">Male</option>\r\n              <option value=\"Female\">Female</option>\r\n            </select>\r\n            <input type=\"date\" placeholder=\"Date of Birth\" {...register('dob', { required: true })} />\r\n            <div className = 'photo-container'>\r\n              <WebcamCapture/>\r\n            </div>\r\n            <input type=\"submit\" />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Form from './Form'\r\nimport '../App.css'\r\n\r\nconst FormButton = () => {\r\n  const [showForm, setShowForm] = React.useState(false)\r\n  const onClick = () => setShowForm(true)\r\n\r\n  return (\r\n    <div className = \"button\">\r\n      <input type = \"submit\" value = \"Form\" onClick = {onClick}/>\r\n      {showForm ? <Form/> : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FormButton\r\n","const config = {\n  apiKey: 'AIzaSyBK4_ckiJfuDrGH2naN07SmruemW2EjRPM',\n  authDomain: 'webrtc-dd6e4.firebaseapp.com',\n  databaseURL: 'https://webrtc-dd6e4-default-rtdb.asia-southeast1.firebasedatabase.app',\n  projectId: 'webrtc-dd6e4',\n  storageBucket: 'webrtc-dd6e4.appspot.com',\n  messagingSenderId: '143154930393',\n  appId: '1:143154930393:web:1465b41294f95cb5f8d4c8',\n  measurementId: 'G-XV6LN18P27'\n}\n\nexport default config\n","import React, { Component } from 'react';\n\nimport io from 'socket.io-client'\nimport FormButton from './formDisplay/FormButton'\nimport firebase from 'firebase'\nimport config from './config';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    // https://reactjs.org/docs/refs-and-the-dom.html\n    this.localVideoref = React.createRef()\n    this.remoteVideoref = React.createRef()\n\n    this.socket = null\n    this.candidates = []\n  }\n\n  componentDidMount = () => {\n\n    firebase.initializeApp(config)\n\n    this.socket = io.connect(\n      'https://e7f9-139-192-176-231.ngrok.io/webrtcPeer',\n      {\n        path: '/webrtc',\n        query: {}\n      }\n    )\n\n    this.socket.on('connection-success', success => {\n      console.log(success)\n    })\n\n    this.socket.on('offerOrAnswer', (sdp) => {\n\n      this.textref.value = JSON.stringify(sdp)\n\n      // set sdp as remote description\n      this.pc.setRemoteDescription(new RTCSessionDescription(sdp))\n    })\n\n    this.socket.on('candidate', (candidate) => {\n      // console.log('From Peer... ', JSON.stringify(candidate))\n      // this.candidates = [...this.candidates, candidate]\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n    })\n\n    // const pc_config = null\n\n    const pc_config = {\n      \"iceServers\": [\n        // {\n        //   urls: 'stun:[STUN_IP]:[PORT]',\n        //   'credentials': '[YOR CREDENTIALS]',\n        //   'username': '[USERNAME]'\n        // },\n        {\n          urls : 'stun:stun.l.google.com:19302'\n        }\n      ]\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\n    // create an instance of RTCPeerConnection\n    this.pc = new RTCPeerConnection(pc_config)\n\n    // triggered when a new candidate is returned\n    this.pc.onicecandidate = (e) => {\n      // send the candidates to the remote peer\n      // see addCandidate below to be triggered on the remote peer\n      if (e.candidate) {\n        // console.log(JSON.stringify(e.candidate))\n        this.sendToPeer('candidate', e.candidate)\n      }\n    }\n\n    // triggered when there is a change in connection state\n    this.pc.oniceconnectionstatechange = (e) => {\n      console.log(e)\n    }\n\n    // triggered when a stream is added to pc, see below - this.pc.addStream(stream)\n    // this.pc.onaddstream = (e) => {\n    //   this.remoteVideoref.current.srcObject = e.stream\n    // }\n\n    this.pc.ontrack = (e) => {\n      debugger\n      this.remoteVideoref.current.srcObject = e.streams[0]\n    }\n\n    // called when getUserMedia() successfully returns - see below\n    // getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\n    const success = (stream) => {\n      window.localStream = stream\n      this.localVideoref.current.srcObject = stream\n      this.pc.addStream(stream)\n    }\n\n    // called when getUserMedia() fails - see below\n    const failure = (e) => {\n      console.log('getUserMedia Error: ', e)\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    // see the above link for more constraint options\n    const constraints = {\n      // audio: true,\n      video: true,\n      // video: {\n      //   width: 1280,\n      //   height: 720\n      // },\n      // video: {\n      //   width: { min: 1280 },\n      // }\n      options: {\n        mirror: true,\n      }\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    navigator.mediaDevices.getUserMedia(constraints)\n      .then(success)\n      .catch(failure)\n  }\n\n  sendToPeer = (messageType, payload) => {\n    this.socket.emit(messageType, {\n      socketID: this.socket.id,\n      payload\n    })\n  }\n\n  /* ACTION METHODS FROM THE BUTTONS ON SCREEN */\n\n  createOffer = () => {\n    console.log('Offer')\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n    // initiates the creation of SDP\n    this.pc.createOffer({ offerToReceiveVideo: 1 })\n      .then(sdp => {\n        // console.log(JSON.stringify(sdp))\n\n        // set offer sdp as local description\n        this.pc.setLocalDescription(sdp)\n\n        this.sendToPeer('offerOrAnswer', sdp)\n    })\n  }\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createAnswer\n  // creates an SDP answer to an offer received from remote peer\n  createAnswer = () => {\n    console.log('Answer')\n    this.pc.createAnswer({ offerToReceiveVideo: 1 })\n      .then(sdp => {\n        // console.log(JSON.stringify(sdp))\n\n        // set answer sdp as local description\n        this.pc.setLocalDescription(sdp)\n\n        this.sendToPeer('offerOrAnswer', sdp)\n    })\n  }\n\n  setRemoteDescription = () => {\n    // retrieve and parse the SDP copied from the remote peer\n    const desc = JSON.parse(this.textref.value)\n\n    // set sdp as remote description\n    this.pc.setRemoteDescription(new RTCSessionDescription(desc))\n  }\n\n  addCandidate = () => {\n    // retrieve and parse the Candidate copied from the remote peer\n    // const candidate = JSON.parse(this.textref.value)\n    // console.log('Adding candidate:', candidate)\n\n    // add the candidate to the peer connection\n    // this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n\n    this.candidates.forEach(candidate => {\n      console.log(JSON.stringify(candidate))\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n    });\n  }\n\n  render() {\n\n    return (\n      <div>\n        <video\n          style={{\n            width: 240,\n            height: 240,\n            margin: 5,\n            backgroundColor: 'black'\n          }}\n          ref={ this.localVideoref }\n          autoPlay muted>\n        </video>\n        <video\n          style={{\n            width: 240,\n            height: 240,\n            margin: 5,\n            backgroundColor: 'black'\n          }}\n          ref={ this.remoteVideoref }\n          autoPlay>\n        </video>\n        <br />\n\n        <button onClick={this.createOffer}>Offer</button>\n        <button onClick={this.createAnswer}>Answer</button>\n\n        <br />\n        <br />\n        <FormButton/>\n        {/* <textarea style={{ width: 450, height:40 }} ref={ref => { this.textref = ref }} /> */}\n        \n\n        {/* <br />\n        <button onClick={this.setRemoteDescription}>Set Remote Desc</button>\n        <button onClick={this.addCandidate}>Add Candidate</button> */}\n      </div>\n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}